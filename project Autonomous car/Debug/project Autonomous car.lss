
project Autonomous car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c0  00000205  2**0
                  ALLOC
  2 .bss          00000004  00800060  00800060  00000fcd  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000010a  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a44  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f66  00000000  00000000  00004de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001684  00000000  00000000  00005d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  000073cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001726  00000000  00000000  00007dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00009510  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000e84  00000e84  00000fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009710  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.SendEnablePulse 00000022  00000cde  00000cde  00000e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.CLCD_voidSendCommand 00000028  00000c42  00000c42  00000d76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.CLCD_voidSendData 00000028  00000c6a  00000c6a  00000d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.CLCD_voidInit 00000026  00000c92  00000c92  00000dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.CLCD_sendString 00000034  00000b2c  00000b2c  00000c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.CLCD_sendNumebr 000000be  000005c8  000005c8  000006fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.CLCD_voidGoToXY 0000001a  00000d82  00000d82  00000eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.CLCD_voidClearDisplay 00000008  00000e60  00000e60  00000f94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.MOTOR_u8MoveMotor 0000005c  000007d0  000007d0  00000904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.MOTOR_voidStopMotor 0000002a  00000c18  00000c18  00000d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.MOTOR_voidSetMotorsPWMDutyCycle 00000006  00000e78  00000e78  00000fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SERVO_voidRotateToAngle 00000022  00000d00  00000d00  00000e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.USS_voidInit 0000000e  00000de4  00000de4  00000f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.setICP_RisingEdge 0000000e  00000df2  00000df2  00000f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.setICP_FallingEdge 0000000e  00000e00  00000e00  00000f34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.Clear_Timer1Flags 0000000e  00000e0e  00000e0e  00000f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.calcuteDistance 00000030  00000b60  00000b60  00000c94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.USS_u32GetDistance 0000004e  00000a1a  00000a1a  00000b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_9 0000002e  00000b90  00000b90  00000cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.TIMER1_OVER_FLOW 00000002  0080006d  0080006d  00000fcd  2**0
                  ALLOC
 35 .text.MoveServo180Degrees 00000072  00000700  00000700  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.voidInitMotors 00000026  00000cb8  00000cb8  00000dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.voidCheckObstacle_MoveAccordingly 000000d8  000001b0  000001b0  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.charptrCarDirection 00000054  0000082c  0000082c  00000960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .progmemx.data 00000011  000000c0  000000c0  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .text.main    000000cc  000004fc  000004fc  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .data.Local_carDir.2050 00000003  0080006a  00000e96  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .bss.Local_u8CurrentAngle.2028 00000001  00800071  00800071  00000fcd  2**0
                  ALLOC
 43 .data.Local_u8IncFlag.2029 00000001  00800072  000000d1  00000205  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 44 .text.DIO_u8SetPinValue 000000d2  0000035c  0000035c  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.DIO_u8SetPortValue 0000002c  00000bec  00000bec  00000d20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__vector_1 00000052  00000880  00000880  000009b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__vector_2 00000052  000008d2  000008d2  00000a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_3 00000052  00000924  00000924  00000a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.EXTI_pvCallBackFunc 00000006  00800064  00800064  00000fcd  2**0
                  ALLOC
 50 .text.GIE_voidEnableGlobal 00000004  00000e88  00000e88  00000fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.PORT_voidInit 00000018  00000db6  00000db6  00000eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.PWM0_VoidInit 00000020  00000d44  00000d44  00000e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.PWM0_VoidSetDutyCycle 0000003c  00000af0  00000af0  00000c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TIMEROvf_u8Enable 0000002e  00000bbe  00000bbe  00000cf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__vector_11 00000052  00000976  00000976  00000aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_10 00000052  000009c8  000009c8  00000afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .bss.Timer0ovf_pvCallBackFunc 00000002  0080006f  0080006f  00000fcd  2**0
                  ALLOC
 58 .text         0000000e  00000e1c  00000e1c  00000f50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text         000000ce  0000042e  0000042e  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text         00000008  00000e68  00000e68  00000f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text         000000de  000000d2  000000d2  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text         0000005e  00000772  00000772  000008a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text         0000007a  00000686  00000686  000007ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text         0000000c  00000e54  00000e54  00000f88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text         00000006  00000e7e  00000e7e  00000fb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text         0000000e  00000e2a  00000e2a  00000f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text         0000000e  00000e38  00000e38  00000f6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text         00000022  00000d22  00000d22  00000e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text         00000044  00000a68  00000a68  00000b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text         0000000e  00000e46  00000e46  00000f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text         00000008  00000e70  00000e70  00000fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text         000000d4  00000288  00000288  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc.div 00000044  00000aac  00000aac  00000be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc.mul 0000001e  00000d64  00000d64  00000e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.libgcc  0000001a  00000d9c  00000d9c  00000ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__dummy_fini 00000002  00000e90  00000e90  00000fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__dummy_funcs_on_exit 00000002  00000e92  00000e92  00000fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__dummy_simulator_exit 00000002  00000e94  00000e94  00000fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.exit    00000016  00000dce  00000dce  00000f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text._Exit   00000004  00000e8c  00000e8c  00000fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 04 	jmp	0x880	; 0x880 <__vector_1>
   8:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_2>
   c:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_3>
  10:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  14:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  18:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  1c:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  20:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  24:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__vector_9>
  28:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_10>
  2c:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_11>
  30:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  34:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  38:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  3c:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  40:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  44:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  48:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  4c:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>
  50:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6a       	ori	r16, 0xA0	; 160
  58:	80 00       	.word	0x0080	; ????
  5a:	6a 00       	.word	0x006a	; ????
  5c:	6d 00       	.word	0x006d	; ????
  5e:	0e 96       	adiw	r24, 0x0e	; 14
  60:	00 6d       	ori	r16, 0xD0	; 208
  62:	00 72       	andi	r16, 0x20	; 32
  64:	80 00       	.word	0x0080	; ????
  66:	72 00       	.word	0x0072	; ????
  68:	73 00       	.word	0x0073	; ????
  6a:	00 d1       	rcall	.+512    	; 0x26c <voidCheckObstacle_MoveAccordingly+0xbc>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	e4 e5       	ldi	r30, 0x54	; 84
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	17 c0       	rjmp	.+46     	; 0xae <__do_clear_bss+0x8>
  80:	b5 91       	lpm	r27, Z+
  82:	a5 91       	lpm	r26, Z+
  84:	35 91       	lpm	r19, Z+
  86:	25 91       	lpm	r18, Z+
  88:	05 91       	lpm	r16, Z+
  8a:	07 fd       	sbrc	r16, 7
  8c:	0c c0       	rjmp	.+24     	; 0xa6 <__do_clear_bss>
  8e:	95 91       	lpm	r25, Z+
  90:	85 91       	lpm	r24, Z+
  92:	ef 01       	movw	r28, r30
  94:	f9 2f       	mov	r31, r25
  96:	e8 2f       	mov	r30, r24
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0x20>
  a2:	fe 01       	movw	r30, r28
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_clear_bss+0x8>

000000a6 <__do_clear_bss>:
  a6:	1d 92       	st	X+, r1
  a8:	a2 17       	cp	r26, r18
  aa:	b3 07       	cpc	r27, r19
  ac:	e1 f7       	brne	.-8      	; 0xa6 <__do_clear_bss>
  ae:	ec 36       	cpi	r30, 0x6C	; 108
  b0:	f4 07       	cpc	r31, r20
  b2:	31 f7       	brne	.-52     	; 0x80 <__do_copy_data+0x8>
  b4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
  b8:	0c 94 e7 06 	jmp	0xdce	; 0xdce <exit>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>

Disassembly of section .text:

00000e84 <__bad_interrupt>:
 e84:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SendEnablePulse:

00000cde <SendEnablePulse>:
	{
		Local_u8ErrorState = NULL_POINTER;
	}

	return Local_u8ErrorState;
}
 cde:	41 e0       	ldi	r20, 0x01	; 1
 ce0:	62 e0       	ldi	r22, 0x02	; 2
 ce2:	82 e0       	ldi	r24, 0x02	; 2
 ce4:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 ce8:	8f e3       	ldi	r24, 0x3F	; 63
 cea:	9f e1       	ldi	r25, 0x1F	; 31
 cec:	01 97       	sbiw	r24, 0x01	; 1
 cee:	f1 f7       	brne	.-4      	; 0xcec <SendEnablePulse+0xe>
 cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <SendEnablePulse+0x14>
 cf2:	00 00       	nop
 cf4:	40 e0       	ldi	r20, 0x00	; 0
 cf6:	62 e0       	ldi	r22, 0x02	; 2
 cf8:	82 e0       	ldi	r24, 0x02	; 2
 cfa:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 cfe:	08 95       	ret

Disassembly of section .text.CLCD_voidSendCommand:

00000c42 <CLCD_voidSendCommand>:
 c42:	cf 93       	push	r28
 c44:	c8 2f       	mov	r28, r24
 c46:	40 e0       	ldi	r20, 0x00	; 0
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	82 e0       	ldi	r24, 0x02	; 2
 c4c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 c50:	40 e0       	ldi	r20, 0x00	; 0
 c52:	61 e0       	ldi	r22, 0x01	; 1
 c54:	82 e0       	ldi	r24, 0x02	; 2
 c56:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 c5a:	6c 2f       	mov	r22, r28
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_u8SetPortValue>
 c62:	0e 94 6f 06 	call	0xcde	; 0xcde <SendEnablePulse>
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

Disassembly of section .text.CLCD_voidSendData:

00000c6a <CLCD_voidSendData>:
 c6a:	cf 93       	push	r28
 c6c:	c8 2f       	mov	r28, r24
 c6e:	41 e0       	ldi	r20, 0x01	; 1
 c70:	60 e0       	ldi	r22, 0x00	; 0
 c72:	82 e0       	ldi	r24, 0x02	; 2
 c74:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 c78:	40 e0       	ldi	r20, 0x00	; 0
 c7a:	61 e0       	ldi	r22, 0x01	; 1
 c7c:	82 e0       	ldi	r24, 0x02	; 2
 c7e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 c82:	6c 2f       	mov	r22, r28
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_u8SetPortValue>
 c8a:	0e 94 6f 06 	call	0xcde	; 0xcde <SendEnablePulse>
 c8e:	cf 91       	pop	r28
 c90:	08 95       	ret

Disassembly of section .text.CLCD_voidInit:

00000c92 <CLCD_voidInit>:
 c92:	2f ef       	ldi	r18, 0xFF	; 255
 c94:	83 ef       	ldi	r24, 0xF3	; 243
 c96:	91 e0       	ldi	r25, 0x01	; 1
 c98:	21 50       	subi	r18, 0x01	; 1
 c9a:	80 40       	sbci	r24, 0x00	; 0
 c9c:	90 40       	sbci	r25, 0x00	; 0
 c9e:	e1 f7       	brne	.-8      	; 0xc98 <CLCD_voidInit+0x6>
 ca0:	00 c0       	rjmp	.+0      	; 0xca2 <CLCD_voidInit+0x10>
 ca2:	00 00       	nop
 ca4:	88 e3       	ldi	r24, 0x38	; 56
 ca6:	0e 94 21 06 	call	0xc42	; 0xc42 <CLCD_voidSendCommand>
 caa:	8c e0       	ldi	r24, 0x0C	; 12
 cac:	0e 94 21 06 	call	0xc42	; 0xc42 <CLCD_voidSendCommand>
 cb0:	81 e0       	ldi	r24, 0x01	; 1
 cb2:	0e 94 21 06 	call	0xc42	; 0xc42 <CLCD_voidSendCommand>
 cb6:	08 95       	ret

Disassembly of section .text.CLCD_sendString:

00000b2c <CLCD_sendString>:
 b2c:	0f 93       	push	r16
 b2e:	1f 93       	push	r17
 b30:	cf 93       	push	r28
 b32:	df 93       	push	r29
 b34:	00 97       	sbiw	r24, 0x00	; 0
 b36:	71 f0       	breq	.+28     	; 0xb54 <CLCD_sendString+0x28>
 b38:	8c 01       	movw	r16, r24
 b3a:	c0 e0       	ldi	r28, 0x00	; 0
 b3c:	d0 e0       	ldi	r29, 0x00	; 0
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <CLCD_sendString+0x1a>
 b40:	0e 94 35 06 	call	0xc6a	; 0xc6a <CLCD_voidSendData>
 b44:	21 96       	adiw	r28, 0x01	; 1
 b46:	f8 01       	movw	r30, r16
 b48:	ec 0f       	add	r30, r28
 b4a:	fd 1f       	adc	r31, r29
 b4c:	80 81       	ld	r24, Z
 b4e:	81 11       	cpse	r24, r1
 b50:	f7 cf       	rjmp	.-18     	; 0xb40 <CLCD_sendString+0x14>
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <CLCD_sendString+0x2a>
 b54:	82 e0       	ldi	r24, 0x02	; 2
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	1f 91       	pop	r17
 b5c:	0f 91       	pop	r16
 b5e:	08 95       	ret

Disassembly of section .text.CLCD_sendNumebr:

000005c8 <CLCD_sendNumebr>:
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	8b 01       	movw	r16, r22
 5d8:	9c 01       	movw	r18, r24
 5da:	67 2b       	or	r22, r23
 5dc:	68 2b       	or	r22, r24
 5de:	69 2b       	or	r22, r25
 5e0:	51 f5       	brne	.+84     	; 0x636 <CLCD_sendNumebr+0x6e>
 5e2:	80 e3       	ldi	r24, 0x30	; 48
 5e4:	0e 94 35 06 	call	0xc6a	; 0xc6a <CLCD_voidSendData>
 5e8:	45 c0       	rjmp	.+138    	; 0x674 <CLCD_sendNumebr+0xac>
 5ea:	dc 01       	movw	r26, r24
 5ec:	cb 01       	movw	r24, r22
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	aa 1f       	adc	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	6c 01       	movw	r12, r24
 5f8:	7d 01       	movw	r14, r26
 5fa:	cc 0c       	add	r12, r12
 5fc:	dd 1c       	adc	r13, r13
 5fe:	ee 1c       	adc	r14, r14
 600:	ff 1c       	adc	r15, r15
 602:	cc 0c       	add	r12, r12
 604:	dd 1c       	adc	r13, r13
 606:	ee 1c       	adc	r14, r14
 608:	ff 1c       	adc	r15, r15
 60a:	c8 0e       	add	r12, r24
 60c:	d9 1e       	adc	r13, r25
 60e:	ea 1e       	adc	r14, r26
 610:	fb 1e       	adc	r15, r27
 612:	c9 01       	movw	r24, r18
 614:	b8 01       	movw	r22, r16
 616:	2a e0       	ldi	r18, 0x0A	; 10
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	0e 94 56 05 	call	0xaac	; 0xaac <__udivmodsi4>
 622:	6c 0d       	add	r22, r12
 624:	7d 1d       	adc	r23, r13
 626:	8e 1d       	adc	r24, r14
 628:	9f 1d       	adc	r25, r15
 62a:	02 2f       	mov	r16, r18
 62c:	13 2f       	mov	r17, r19
 62e:	24 2f       	mov	r18, r20
 630:	35 2f       	mov	r19, r21
 632:	cf 5f       	subi	r28, 0xFF	; 255
 634:	04 c0       	rjmp	.+8      	; 0x63e <CLCD_sendNumebr+0x76>
 636:	c0 e0       	ldi	r28, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	cb 01       	movw	r24, r22
 63e:	01 15       	cp	r16, r1
 640:	11 05       	cpc	r17, r1
 642:	21 05       	cpc	r18, r1
 644:	31 05       	cpc	r19, r1
 646:	89 f6       	brne	.-94     	; 0x5ea <CLCD_sendNumebr+0x22>
 648:	13 c0       	rjmp	.+38     	; 0x670 <CLCD_sendNumebr+0xa8>
 64a:	2a e0       	ldi	r18, 0x0A	; 10
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	0e 94 56 05 	call	0xaac	; 0xaac <__udivmodsi4>
 656:	e2 2e       	mov	r14, r18
 658:	f3 2e       	mov	r15, r19
 65a:	04 2f       	mov	r16, r20
 65c:	15 2f       	mov	r17, r21
 65e:	80 e3       	ldi	r24, 0x30	; 48
 660:	86 0f       	add	r24, r22
 662:	0e 94 35 06 	call	0xc6a	; 0xc6a <CLCD_voidSendData>
 666:	6e 2d       	mov	r22, r14
 668:	7f 2d       	mov	r23, r15
 66a:	80 2f       	mov	r24, r16
 66c:	91 2f       	mov	r25, r17
 66e:	c1 50       	subi	r28, 0x01	; 1
 670:	c1 11       	cpse	r28, r1
 672:	eb cf       	rjmp	.-42     	; 0x64a <CLCD_sendNumebr+0x82>
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	08 95       	ret

Disassembly of section .text.CLCD_voidGoToXY:

00000d82 <CLCD_voidGoToXY>:
 d82:	66 23       	and	r22, r22
 d84:	29 f0       	breq	.+10     	; 0xd90 <CLCD_voidGoToXY+0xe>
 d86:	61 30       	cpi	r22, 0x01	; 1
 d88:	21 f4       	brne	.+8      	; 0xd92 <CLCD_voidGoToXY+0x10>
 d8a:	90 e4       	ldi	r25, 0x40	; 64
 d8c:	98 0f       	add	r25, r24
 d8e:	01 c0       	rjmp	.+2      	; 0xd92 <CLCD_voidGoToXY+0x10>
 d90:	98 2f       	mov	r25, r24
 d92:	89 2f       	mov	r24, r25
 d94:	80 68       	ori	r24, 0x80	; 128
 d96:	0e 94 21 06 	call	0xc42	; 0xc42 <CLCD_voidSendCommand>
 d9a:	08 95       	ret

Disassembly of section .text.CLCD_voidClearDisplay:

00000e60 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay()
{
	CLCD_voidSendCommand(0b00000001);
 e60:	81 e0       	ldi	r24, 0x01	; 1
 e62:	0e 94 21 06 	call	0xc42	; 0xc42 <CLCD_voidSendCommand>
 e66:	08 95       	ret

Disassembly of section .text.MOTOR_u8MoveMotor:

000007d0 <MOTOR_u8MoveMotor>:
#include "../../MCAL/PWM/PWM_interface.h"
#include "MOTOR_interface.h"



uint8 MOTOR_u8MoveMotor(struct Motor Copy_Motor , uint8 Copy_u8Dirction){
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	c8 2f       	mov	r28, r24
 7d6:	d9 2f       	mov	r29, r25
	uint8 Local_u8ErrorState = OK;
	switch(Copy_u8Dirction){
 7d8:	66 23       	and	r22, r22
 7da:	19 f0       	breq	.+6      	; 0x7e2 <MOTOR_u8MoveMotor+0x12>
 7dc:	61 30       	cpi	r22, 0x01	; 1
 7de:	89 f0       	breq	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e0:	21 c0       	rjmp	.+66     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	case MOTOR_u8_CLOCKWISE:
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_LOW);
 7e2:	68 2f       	mov	r22, r24
 7e4:	62 95       	swap	r22
 7e6:	6f 70       	andi	r22, 0x0F	; 15
 7e8:	cf 70       	andi	r28, 0x0F	; 15
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	8c 2f       	mov	r24, r28
 7ee:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_HIGH);
 7f2:	6d 2f       	mov	r22, r29
 7f4:	6f 70       	andi	r22, 0x0F	; 15
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	8c 2f       	mov	r24, r28
 7fa:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
#include "MOTOR_interface.h"



uint8 MOTOR_u8MoveMotor(struct Motor Copy_Motor , uint8 Copy_u8Dirction){
	uint8 Local_u8ErrorState = OK;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Dirction){
	case MOTOR_u8_CLOCKWISE:
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_LOW);
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_HIGH);
		break;
 800:	12 c0       	rjmp	.+36     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	case MOTOR_u8_ANTICLOCKWISE:
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_LOW);
 802:	69 2f       	mov	r22, r25
 804:	6f 70       	andi	r22, 0x0F	; 15
 806:	d8 2f       	mov	r29, r24
 808:	df 70       	andi	r29, 0x0F	; 15
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	8d 2f       	mov	r24, r29
 80e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_HIGH);
 812:	6c 2f       	mov	r22, r28
 814:	62 95       	swap	r22
 816:	6f 70       	andi	r22, 0x0F	; 15
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	8d 2f       	mov	r24, r29
 81c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
#include "MOTOR_interface.h"



uint8 MOTOR_u8MoveMotor(struct Motor Copy_Motor , uint8 Copy_u8Dirction){
	uint8 Local_u8ErrorState = OK;
 820:	80 e0       	ldi	r24, 0x00	; 0
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_HIGH);
		break;
	case MOTOR_u8_ANTICLOCKWISE:
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_LOW);
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_HIGH);
		break;
 822:	01 c0       	rjmp	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	default:
		Local_u8ErrorState = NOK;
 824:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return Local_u8ErrorState;
}
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	08 95       	ret

Disassembly of section .text.MOTOR_voidStopMotor:

00000c18 <MOTOR_voidStopMotor>:

/* this function stops pin1 and pin2 of the motor does not affect PWM*/
void MOTOR_voidStopMotor(struct Motor Copy_Motor){
 c18:	cf 93       	push	r28
 c1a:	df 93       	push	r29
 c1c:	d9 2f       	mov	r29, r25
	DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_LOW);
 c1e:	68 2f       	mov	r22, r24
 c20:	62 95       	swap	r22
 c22:	6f 70       	andi	r22, 0x0F	; 15
 c24:	c8 2f       	mov	r28, r24
 c26:	cf 70       	andi	r28, 0x0F	; 15
 c28:	40 e0       	ldi	r20, 0x00	; 0
 c2a:	8c 2f       	mov	r24, r28
 c2c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_LOW);
 c30:	6d 2f       	mov	r22, r29
 c32:	6f 70       	andi	r22, 0x0F	; 15
 c34:	40 e0       	ldi	r20, 0x00	; 0
 c36:	8c 2f       	mov	r24, r28
 c38:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
}
 c3c:	df 91       	pop	r29
 c3e:	cf 91       	pop	r28
 c40:	08 95       	ret

Disassembly of section .text.MOTOR_voidSetMotorsPWMDutyCycle:

00000e78 <MOTOR_voidSetMotorsPWMDutyCycle>:


/* PWM pin at OC0 (PWM0) */
void MOTOR_voidSetMotorsPWMDutyCycle(uint8 Copy_u8DutyCycle){
	PWM0_VoidSetDutyCycle(Copy_u8DutyCycle);
 e78:	0e 94 78 05 	call	0xaf0	; 0xaf0 <PWM0_VoidSetDutyCycle>
 e7c:	08 95       	ret

Disassembly of section .text.SERVO_voidRotateToAngle:

00000d00 <SERVO_voidRotateToAngle>:


void SERVO_voidRotateToAngle(uint8 Copy_u8AngleValue){
	if (Copy_u8AngleValue <= 0)
		Copy_u8AngleValue = 1;
	DIO_u8SetPinValue(SERVO_u8_PORT, SERVO_u8_PIN, DIO_u8_PIN_HIGH);
 d00:	41 e0       	ldi	r20, 0x01	; 1
 d02:	65 e0       	ldi	r22, 0x05	; 5
 d04:	83 e0       	ldi	r24, 0x03	; 3
 d06:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d0a:	8f e1       	ldi	r24, 0x1F	; 31
 d0c:	93 e0       	ldi	r25, 0x03	; 3
 d0e:	01 97       	sbiw	r24, 0x01	; 1
 d10:	f1 f7       	brne	.-4      	; 0xd0e <SERVO_voidRotateToAngle+0xe>
 d12:	00 c0       	rjmp	.+0      	; 0xd14 <SERVO_voidRotateToAngle+0x14>
 d14:	00 00       	nop
	_delay_us(Local_DelayValue);
	DIO_u8SetPinValue(SERVO_u8_PORT, SERVO_u8_PIN, DIO_u8_PIN_LOW);
 d16:	40 e0       	ldi	r20, 0x00	; 0
 d18:	65 e0       	ldi	r22, 0x05	; 5
 d1a:	83 e0       	ldi	r24, 0x03	; 3
 d1c:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 d20:	08 95       	ret

Disassembly of section .text.USS_voidInit:

00000de4 <USS_voidInit>:
	CLR_BIT(TCCR1B, TCCR1B_ICES1); // Capture on falling edge
	SET_BIT(TCCR1B, TCCR1B_CS10); // start count no prescaler
}

void stopTimer1(){
	CLR_BIT(TCCR1B, TCCR1B_CS10);
 de4:	0e 94 44 07 	call	0xe88	; 0xe88 <GIE_voidEnableGlobal>
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	0e 94 df 05 	call	0xbbe	; 0xbbe <TIMEROvf_u8Enable>
 dee:	1f bc       	out	0x2f, r1	; 47
 df0:	08 95       	ret

Disassembly of section .text.setICP_RisingEdge:

00000df2 <setICP_RisingEdge>:
 df2:	8e b5       	in	r24, 0x2e	; 46
 df4:	80 64       	ori	r24, 0x40	; 64
 df6:	8e bd       	out	0x2e, r24	; 46
 df8:	8e b5       	in	r24, 0x2e	; 46
 dfa:	81 60       	ori	r24, 0x01	; 1
 dfc:	8e bd       	out	0x2e, r24	; 46
 dfe:	08 95       	ret

Disassembly of section .text.setICP_FallingEdge:

00000e00 <setICP_FallingEdge>:
 e00:	8e b5       	in	r24, 0x2e	; 46
 e02:	8f 7b       	andi	r24, 0xBF	; 191
 e04:	8e bd       	out	0x2e, r24	; 46
 e06:	8e b5       	in	r24, 0x2e	; 46
 e08:	81 60       	ori	r24, 0x01	; 1
 e0a:	8e bd       	out	0x2e, r24	; 46
 e0c:	08 95       	ret

Disassembly of section .text.Clear_Timer1Flags:

00000e0e <Clear_Timer1Flags>:
}

void Clear_Timer1Flags(){
	/* clear flags */
	SET_BIT(TIFR, TIFR_ICF1); /* Clear ICP flag (Input Capture flag) */
 e0e:	88 b7       	in	r24, 0x38	; 56
 e10:	80 62       	ori	r24, 0x20	; 32
 e12:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR, TIFR_TOV1); /* Clear Timer Overflow flag */
 e14:	88 b7       	in	r24, 0x38	; 56
 e16:	84 60       	ori	r24, 0x04	; 4
 e18:	88 bf       	out	0x38, r24	; 56
 e1a:	08 95       	ret

Disassembly of section .text.calcuteDistance:

00000b60 <calcuteDistance>:
	CLR_BIT(TCCR1B, TCCR1B_ICES1); // Capture on falling edge
	SET_BIT(TCCR1B, TCCR1B_CS10); // start count no prescaler
}

void stopTimer1(){
	CLR_BIT(TCCR1B, TCCR1B_CS10);
 b60:	46 b5       	in	r20, 0x26	; 38
 b62:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <TIMER1_OVER_FLOW>
 b66:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <TIMER1_OVER_FLOW+0x1>
 b6a:	af ef       	ldi	r26, 0xFF	; 255
 b6c:	bf ef       	ldi	r27, 0xFF	; 255
 b6e:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 b72:	64 0f       	add	r22, r20
 b74:	71 1d       	adc	r23, r1
 b76:	81 1d       	adc	r24, r1
 b78:	91 1d       	adc	r25, r1
 b7a:	0e 94 43 03 	call	0x686	; 0x686 <__floatunsisf>
 b7e:	29 e2       	ldi	r18, 0x29	; 41
 b80:	3c ef       	ldi	r19, 0xFC	; 252
 b82:	46 e6       	ldi	r20, 0x66	; 102
 b84:	54 e4       	ldi	r21, 0x44	; 68
 b86:	0e 94 34 07 	call	0xe68	; 0xe68 <__divsf3>
 b8a:	0e 94 b9 03 	call	0x772	; 0x772 <__fixunssfsi>
 b8e:	08 95       	ret

Disassembly of section .text.USS_u32GetDistance:

00000a1a <USS_u32GetDistance>:
 a1a:	41 e0       	ldi	r20, 0x01	; 1
 a1c:	63 e0       	ldi	r22, 0x03	; 3
 a1e:	82 e0       	ldi	r24, 0x02	; 2
 a20:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 a24:	8a e1       	ldi	r24, 0x1A	; 26
 a26:	8a 95       	dec	r24
 a28:	f1 f7       	brne	.-4      	; 0xa26 <USS_u32GetDistance+0xc>
 a2a:	00 c0       	rjmp	.+0      	; 0xa2c <USS_u32GetDistance+0x12>
 a2c:	40 e0       	ldi	r20, 0x00	; 0
 a2e:	63 e0       	ldi	r22, 0x03	; 3
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinValue>
 a36:	1d bc       	out	0x2d, r1	; 45
 a38:	1c bc       	out	0x2c, r1	; 44
 a3a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <setICP_RisingEdge>
 a3e:	0e 94 07 07 	call	0xe0e	; 0xe0e <Clear_Timer1Flags>
 a42:	08 b6       	in	r0, 0x38	; 56
 a44:	05 fe       	sbrs	r0, 5
 a46:	fd cf       	rjmp	.-6      	; 0xa42 <USS_u32GetDistance+0x28>
 a48:	1d bc       	out	0x2d, r1	; 45
 a4a:	1c bc       	out	0x2c, r1	; 44
 a4c:	0e 94 00 07 	call	0xe00	; 0xe00 <setICP_FallingEdge>
 a50:	0e 94 07 07 	call	0xe0e	; 0xe0e <Clear_Timer1Flags>
 a54:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <TIMER1_OVER_FLOW+0x1>
 a58:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <TIMER1_OVER_FLOW>
 a5c:	08 b6       	in	r0, 0x38	; 56
 a5e:	05 fe       	sbrs	r0, 5
 a60:	fd cf       	rjmp	.-6      	; 0xa5c <USS_u32GetDistance+0x42>
 a62:	0e 94 b0 05 	call	0xb60	; 0xb60 <calcuteDistance>
 a66:	08 95       	ret

Disassembly of section .text.__vector_9:

00000b90 <__vector_9>:
 b90:	1f 92       	push	r1
 b92:	0f 92       	push	r0
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	0f 92       	push	r0
 b98:	11 24       	eor	r1, r1
 b9a:	8f 93       	push	r24
 b9c:	9f 93       	push	r25
 b9e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <TIMER1_OVER_FLOW>
 ba2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <TIMER1_OVER_FLOW+0x1>
 ba6:	01 96       	adiw	r24, 0x01	; 1
 ba8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <TIMER1_OVER_FLOW+0x1>
 bac:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_OVER_FLOW>
 bb0:	9f 91       	pop	r25
 bb2:	8f 91       	pop	r24
 bb4:	0f 90       	pop	r0
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	0f 90       	pop	r0
 bba:	1f 90       	pop	r1
 bbc:	18 95       	reti

Disassembly of section .text.MoveServo180Degrees:

00000700 <MoveServo180Degrees>:

uint8 MoveServo180Degrees();
void voidInitMotors();
void voidCheckObstacle_MoveAccordingly(uint32 Copy_32USSDistance, uint8 Copy_u8Dirction);

uint8 MoveServo180Degrees(){
 700:	cf 93       	push	r28
	static uint8 Local_u8CurrentAngle = 0;
	/* inc_flag is used ro rotate the servo on the
	 * specified angles Clock wise or anti clock wise */
	static uint8 Local_u8IncFlag = 1;
	uint8 Local_u8Direction = ' ';
	if(Local_u8IncFlag)
 702:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Local_u8IncFlag.2029>
 706:	88 23       	and	r24, r24
 708:	31 f0       	breq	.+12     	; 0x716 <MoveServo180Degrees+0x16>
		Local_u8CurrentAngle += 50;
 70a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Local_u8CurrentAngle.2028>
 70e:	8e 5c       	subi	r24, 0xCE	; 206
 710:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Local_u8CurrentAngle.2028>
 714:	05 c0       	rjmp	.+10     	; 0x720 <MoveServo180Degrees+0x20>
	else
		Local_u8CurrentAngle -= 50;
 716:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Local_u8CurrentAngle.2028>
 71a:	82 53       	subi	r24, 0x32	; 50
 71c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Local_u8CurrentAngle.2028>

	switch(Local_u8CurrentAngle){
 720:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Local_u8CurrentAngle.2028>
 724:	82 33       	cpi	r24, 0x32	; 50
 726:	51 f0       	breq	.+20     	; 0x73c <MoveServo180Degrees+0x3c>
 728:	84 36       	cpi	r24, 0x64	; 100
 72a:	21 f0       	breq	.+8      	; 0x734 <MoveServo180Degrees+0x34>
 72c:	81 11       	cpse	r24, r1
 72e:	04 c0       	rjmp	.+8      	; 0x738 <MoveServo180Degrees+0x38>
	case 0:
		Local_u8Direction = 'L';
 730:	cc e4       	ldi	r28, 0x4C	; 76
 732:	05 c0       	rjmp	.+10     	; 0x73e <MoveServo180Degrees+0x3e>
		break;
	case 50:
		Local_u8Direction = 'C';
		break;
	case 100:
		Local_u8Direction = 'R';
 734:	c2 e5       	ldi	r28, 0x52	; 82
		break;
 736:	03 c0       	rjmp	.+6      	; 0x73e <MoveServo180Degrees+0x3e>
	default:
		Local_u8Direction = ' ';
 738:	c0 e2       	ldi	r28, 0x20	; 32
		break;
 73a:	01 c0       	rjmp	.+2      	; 0x73e <MoveServo180Degrees+0x3e>
	switch(Local_u8CurrentAngle){
	case 0:
		Local_u8Direction = 'L';
		break;
	case 50:
		Local_u8Direction = 'C';
 73c:	c3 e4       	ldi	r28, 0x43	; 67
		Local_u8Direction = ' ';
		break;
	}
	/* rotate servo according to changes */
	
	SERVO_voidRotateToAngle(Local_u8CurrentAngle);
 73e:	0e 94 80 06 	call	0xd00	; 0xd00 <SERVO_voidRotateToAngle>
	if(Local_u8CurrentAngle <= 1 || Local_u8CurrentAngle >= 100)
 742:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Local_u8CurrentAngle.2028>
 746:	82 50       	subi	r24, 0x02	; 2
 748:	82 36       	cpi	r24, 0x62	; 98
 74a:	38 f0       	brcs	.+14     	; 0x75a <MoveServo180Degrees+0x5a>
		Local_u8IncFlag = !Local_u8IncFlag;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Local_u8IncFlag.2029>
 752:	91 11       	cpse	r25, r1
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Local_u8IncFlag.2029>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 75a:	2f ef       	ldi	r18, 0xFF	; 255
 75c:	83 ec       	ldi	r24, 0xC3	; 195
 75e:	99 e0       	ldi	r25, 0x09	; 9
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <MoveServo180Degrees+0x60>
 768:	00 c0       	rjmp	.+0      	; 0x76a <MoveServo180Degrees+0x6a>
 76a:	00 00       	nop
	else{
		/* nothing */
	}
	_delay_ms(SERVO_u8_DELAY);
	return Local_u8Direction;
}
 76c:	8c 2f       	mov	r24, r28
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

Disassembly of section .text.voidInitMotors:

00000cb8 <voidInitMotors>:


void voidInitMotors(){
	/* sets port and pin numbers of the connected motors */
	MOTOR1.motor_u8_port = DIO_u8_PORTB;
	MOTOR1.motor_u8_pin1 = DIO_u8_PIN4;
 cb8:	81 e4       	ldi	r24, 0x41	; 65
 cba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <MOTOR1>
	MOTOR1.motor_u8_pin2 = DIO_u8_PIN5;
 cbe:	e3 e6       	ldi	r30, 0x63	; 99
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	80 81       	ld	r24, Z
 cc4:	80 7f       	andi	r24, 0xF0	; 240
 cc6:	85 60       	ori	r24, 0x05	; 5
 cc8:	80 83       	st	Z, r24

	MOTOR2.motor_u8_port = DIO_u8_PORTB;
	MOTOR2.motor_u8_pin1 = DIO_u8_PIN6;
 cca:	81 e6       	ldi	r24, 0x61	; 97
 ccc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	MOTOR2.motor_u8_pin2 = DIO_u8_PIN7;
 cd0:	e1 e6       	ldi	r30, 0x61	; 97
 cd2:	f0 e0       	ldi	r31, 0x00	; 0
 cd4:	80 81       	ld	r24, Z
 cd6:	80 7f       	andi	r24, 0xF0	; 240
 cd8:	87 60       	ori	r24, 0x07	; 7
 cda:	80 83       	st	Z, r24
 cdc:	08 95       	ret

Disassembly of section .text.voidCheckObstacle_MoveAccordingly:

000001b0 <voidCheckObstacle_MoveAccordingly>:
}



void voidCheckObstacle_MoveAccordingly(uint32 Copy_32USSDistance, uint8 Copy_u8Dirction){
 1b0:	cf 93       	push	r28
 1b2:	c4 2f       	mov	r28, r20
	/* 	check if ultrasonic measured distance (Copy_32USSDistance) lower than the critical value
	 *	if true then move according to the direction of Servo motor (Copy_u8Dirction)
	 */
	if(Copy_32USSDistance <= CRITICAL_u8_DISTANCE){
 1b4:	61 35       	cpi	r22, 0x51	; 81
 1b6:	71 05       	cpc	r23, r1
 1b8:	81 05       	cpc	r24, r1
 1ba:	91 05       	cpc	r25, r1
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <voidCheckObstacle_MoveAccordingly+0x10>
 1be:	51 c0       	rjmp	.+162    	; 0x262 <voidCheckObstacle_MoveAccordingly+0xb2>
		MOTOR_voidSetMotorsPWMDutyCycle(100);
 1c0:	84 e6       	ldi	r24, 0x64	; 100
 1c2:	0e 94 3c 07 	call	0xe78	; 0xe78 <MOTOR_voidSetMotorsPWMDutyCycle>
		switch(Copy_u8Dirction){
 1c6:	cc 34       	cpi	r28, 0x4C	; 76
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <voidCheckObstacle_MoveAccordingly+0x26>
 1ca:	c2 35       	cpi	r28, 0x52	; 82
 1cc:	d9 f0       	breq	.+54     	; 0x204 <voidCheckObstacle_MoveAccordingly+0x54>
 1ce:	c3 34       	cpi	r28, 0x43	; 67
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <voidCheckObstacle_MoveAccordingly+0x24>
 1d2:	58 c0       	rjmp	.+176    	; 0x284 <voidCheckObstacle_MoveAccordingly+0xd4>
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <voidCheckObstacle_MoveAccordingly+0x82>
		case 'L':
			MOTOR_u8MoveMotor(MOTOR1, MOTOR_u8_ANTICLOCKWISE);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <MOTOR1>
 1dc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <MOTOR1+0x1>
 1e0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MOTOR_u8MoveMotor>
			MOTOR_voidStopMotor(MOTOR2);
 1e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	0e 94 0c 06 	call	0xc18	; 0xc18 <MOTOR_voidStopMotor>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	83 ed       	ldi	r24, 0xD3	; 211
 1f4:	90 e3       	ldi	r25, 0x30	; 48
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <voidCheckObstacle_MoveAccordingly+0x46>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <voidCheckObstacle_MoveAccordingly+0x50>
 200:	00 00       	nop
 202:	40 c0       	rjmp	.+128    	; 0x284 <voidCheckObstacle_MoveAccordingly+0xd4>
			_delay_ms(CAR_u16_OBSTCALE_SKIP_TIME);
			break;
		case 'R':
			MOTOR_u8MoveMotor(MOTOR2, MOTOR_u8_ANTICLOCKWISE);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MOTOR_u8MoveMotor>
			MOTOR_voidStopMotor(MOTOR1);
 212:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <MOTOR1>
 216:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <MOTOR1+0x1>
 21a:	0e 94 0c 06 	call	0xc18	; 0xc18 <MOTOR_voidStopMotor>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ed       	ldi	r24, 0xD3	; 211
 222:	90 e3       	ldi	r25, 0x30	; 48
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <voidCheckObstacle_MoveAccordingly+0x74>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <voidCheckObstacle_MoveAccordingly+0x7e>
 22e:	00 00       	nop
 230:	29 c0       	rjmp	.+82     	; 0x284 <voidCheckObstacle_MoveAccordingly+0xd4>
			_delay_ms(CAR_u16_OBSTCALE_SKIP_TIME);
			break;
		case 'C':
			MOTOR_u8MoveMotor(MOTOR1, MOTOR_u8_ANTICLOCKWISE);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <MOTOR1>
 238:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <MOTOR1+0x1>
 23c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MOTOR_u8MoveMotor>
			MOTOR_u8MoveMotor(MOTOR2, MOTOR_u8_CLOCKWISE);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 24a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MOTOR_u8MoveMotor>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	83 ed       	ldi	r24, 0xD3	; 211
 252:	90 e3       	ldi	r25, 0x30	; 48
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <voidCheckObstacle_MoveAccordingly+0xa4>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <voidCheckObstacle_MoveAccordingly+0xae>
 25e:	00 00       	nop
 260:	11 c0       	rjmp	.+34     	; 0x284 <voidCheckObstacle_MoveAccordingly+0xd4>
			_delay_ms(CAR_u16_OBSTCALE_SKIP_TIME);
		}
	}
	else{
		/* set speed of the motor by chaning dutycycle */
		MOTOR_voidSetMotorsPWMDutyCycle(100);
 262:	84 e6       	ldi	r24, 0x64	; 100
 264:	0e 94 3c 07 	call	0xe78	; 0xe78 <MOTOR_voidSetMotorsPWMDutyCycle>
		MOTOR_u8MoveMotor(MOTOR1, MOTOR_u8_CLOCKWISE);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <MOTOR1>
 26e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <MOTOR1+0x1>
 272:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MOTOR_u8MoveMotor>
		MOTOR_u8MoveMotor(MOTOR2, MOTOR_u8_CLOCKWISE);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 280:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MOTOR_u8MoveMotor>
	}

}
 284:	cf 91       	pop	r28
 286:	08 95       	ret

Disassembly of section .text.charptrCarDirection:

0000082c <charptrCarDirection>:
char* charptrCarDirection(uint32 Copy_32USSDistance, uint8 Copy_u8Dirction){
	/* this function returns a string of 3 letters descriping the current
	 * direction the car is taking
	 */
	static char Local_carDir[3] = "F \0";
	Local_carDir[0] = 'F';
 82c:	ea e6       	ldi	r30, 0x6A	; 106
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	26 e4       	ldi	r18, 0x46	; 70
 832:	20 83       	st	Z, r18
	Local_carDir[1] = ' ';
 834:	20 e2       	ldi	r18, 0x20	; 32
 836:	21 83       	std	Z+1, r18	; 0x01
	if(Copy_32USSDistance <= CRITICAL_u8_DISTANCE){
 838:	61 35       	cpi	r22, 0x51	; 81
 83a:	71 05       	cpc	r23, r1
 83c:	81 05       	cpc	r24, r1
 83e:	91 05       	cpc	r25, r1
 840:	d0 f4       	brcc	.+52     	; 0x876 <__stack+0x17>
		switch(Copy_u8Dirction){
 842:	4c 34       	cpi	r20, 0x4C	; 76
 844:	29 f0       	breq	.+10     	; 0x850 <charptrCarDirection+0x24>
 846:	42 35       	cpi	r20, 0x52	; 82
 848:	51 f0       	breq	.+20     	; 0x85e <charptrCarDirection+0x32>
 84a:	43 34       	cpi	r20, 0x43	; 67
 84c:	a1 f4       	brne	.+40     	; 0x876 <__stack+0x17>
 84e:	0e c0       	rjmp	.+28     	; 0x86c <__stack+0xd>
		case 'L':
			/* Backward - Right */
			Local_carDir[0] = 'B';
 850:	ea e6       	ldi	r30, 0x6A	; 106
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	82 e4       	ldi	r24, 0x42	; 66
 856:	80 83       	st	Z, r24
			Local_carDir[1] = 'R';
 858:	82 e5       	ldi	r24, 0x52	; 82
 85a:	81 83       	std	Z+1, r24	; 0x01
			break;
 85c:	0c c0       	rjmp	.+24     	; 0x876 <__stack+0x17>
		case 'R':
			/* Backward - Left */
			Local_carDir[0] = 'B';
 85e:	ea e6       	ldi	r30, 0x6A	; 106
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	82 e4       	ldi	r24, 0x42	; 66
 864:	80 83       	st	Z, r24
			Local_carDir[1] = 'L';
 866:	8c e4       	ldi	r24, 0x4C	; 76
 868:	81 83       	std	Z+1, r24	; 0x01
			break;
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__stack+0x17>
		case 'C':
			/* rotate arount it self */
			Local_carDir[0] = 'R';
 86c:	ea e6       	ldi	r30, 0x6A	; 106
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	82 e5       	ldi	r24, 0x52	; 82
 872:	80 83       	st	Z, r24
			Local_carDir[1] = 'R';
 874:	81 83       	std	Z+1, r24	; 0x01
			break;
		}
	}
	Local_carDir[2] = '\0';
 876:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Local_carDir.2050+0x2>
	return Local_carDir;
}
 87a:	8a e6       	ldi	r24, 0x6A	; 106
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	08 95       	ret

Disassembly of section .text.main:

000004fc <main>:

int main(){
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	65 97       	sbiw	r28, 0x15	; 21
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
	/* Init directions and initial values configured in PORT_config.h file */
	PORT_voidInit();
 510:	0e 94 db 06 	call	0xdb6	; 0xdb6 <PORT_voidInit>
	/* Init CLCD 8bit mode */
	CLCD_voidInit();
 514:	0e 94 49 06 	call	0xc92	; 0xc92 <CLCD_voidInit>
	/* init ultra sonic sensor
	 *  - enables Global interrupt
	 *  - enables overflow interrupt for timer 1
	 *  - start count
	 */
	USS_voidInit();
 518:	0e 94 f2 06 	call	0xde4	; 0xde4 <USS_voidInit>
	/*  init PWM of timer0 fast PWM, inverted */
	PWM0_VoidInit();
 51c:	0e 94 a2 06 	call	0xd44	; 0xd44 <PWM0_VoidInit>
	/*  Call Motor init function in main file */
	voidInitMotors();
 520:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <voidInitMotors>
	char servo[]="servo:";
 524:	20 ec       	ldi	r18, 0xC0	; 192
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	87 e0       	ldi	r24, 0x07	; 7
 52c:	f9 01       	movw	r30, r18
 52e:	de 01       	movw	r26, r28
 530:	11 96       	adiw	r26, 0x01	; 1
 532:	74 2f       	mov	r23, r20
 534:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__movmemx_qi>
	char dir[]="dir";
 538:	84 e6       	ldi	r24, 0x64	; 100
 53a:	99 e6       	ldi	r25, 0x69	; 105
 53c:	99 87       	std	Y+9, r25	; 0x09
 53e:	88 87       	std	Y+8, r24	; 0x08
 540:	82 e7       	ldi	r24, 0x72	; 114
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	9b 87       	std	Y+11, r25	; 0x0b
 546:	8a 87       	std	Y+10, r24	; 0x0a
	char distance[]="distance:";
 548:	27 ec       	ldi	r18, 0xC7	; 199
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	8a e0       	ldi	r24, 0x0A	; 10
 550:	f9 01       	movw	r30, r18
 552:	de 01       	movw	r26, r28
 554:	1c 96       	adiw	r26, 0x0c	; 12
 556:	74 2f       	mov	r23, r20
 558:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__movmemx_qi>
	while(1){
		/* Moves the servo 0 to 90 to 180 and back */
		uint8 Local_u8ServoDirection = MoveServo180Degrees();
 55c:	0e 94 80 03 	call	0x700	; 0x700 <MoveServo180Degrees>
 560:	18 2f       	mov	r17, r24
		/* get distance in cm from ultra sonic sensor */
		uint32 Local_u32distance = USS_u32GetDistance();
 562:	0e 94 0d 05 	call	0xa1a	; 0xa1a <USS_u32GetDistance>
 566:	6b 01       	movw	r12, r22
 568:	7c 01       	movw	r14, r24
		CLCD_sendString(distance);
 56a:	ce 01       	movw	r24, r28
 56c:	0c 96       	adiw	r24, 0x0c	; 12
 56e:	0e 94 96 05 	call	0xb2c	; 0xb2c <CLCD_sendString>
		/* print distance of ultrasonic to CLCD */
		CLCD_sendNumebr((uint32)Local_u32distance);
 572:	c7 01       	movw	r24, r14
 574:	b6 01       	movw	r22, r12
 576:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CLCD_sendNumebr>
		/* Newline */
		CLCD_voidGoToXY(0, 1);
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidGoToXY>
		CLCD_sendString(servo);
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	0e 94 96 05 	call	0xb2c	; 0xb2c <CLCD_sendString>
		/* print current servo direction on CLCD */
		CLCD_voidSendData(Local_u8ServoDirection);
 58a:	81 2f       	mov	r24, r17
 58c:	0e 94 35 06 	call	0xc6a	; 0xc6a <CLCD_voidSendData>
		CLCD_sendString(dir);
 590:	ce 01       	movw	r24, r28
 592:	08 96       	adiw	r24, 0x08	; 8
 594:	0e 94 96 05 	call	0xb2c	; 0xb2c <CLCD_sendString>
		char* Local_charptrCarDir = charptrCarDirection
 598:	41 2f       	mov	r20, r17
 59a:	c7 01       	movw	r24, r14
 59c:	b6 01       	movw	r22, r12
 59e:	0e 94 16 04 	call	0x82c	; 0x82c <charptrCarDirection>
				(Local_u32distance, Local_u8ServoDirection);
		/* print current car direction to CLCD */
		CLCD_sendString(Local_charptrCarDir);
 5a2:	0e 94 96 05 	call	0xb2c	; 0xb2c <CLCD_sendString>
		voidCheckObstacle_MoveAccordingly(Local_u32distance, Local_u8ServoDirection);
 5a6:	41 2f       	mov	r20, r17
 5a8:	c7 01       	movw	r24, r14
 5aa:	b6 01       	movw	r22, r12
 5ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <voidCheckObstacle_MoveAccordingly>
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	89 e6       	ldi	r24, 0x69	; 105
 5b4:	98 e1       	ldi	r25, 0x18	; 24
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <main+0xba>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0xc4>
 5c0:	00 00       	nop
		_delay_ms(500);
		/* clear CLCD */
		CLCD_voidClearDisplay();
 5c2:	0e 94 30 07 	call	0xe60	; 0xe60 <CLCD_voidClearDisplay>
 5c6:	ca cf       	rjmp	.-108    	; 0x55c <main+0x60>

Disassembly of section .text.DIO_u8SetPinValue:

0000035c <DIO_u8SetPinValue>:
#include "DIO_interface.h"
#include "DIO_reg.h"
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
	if((Copy_u8PinNum <= DIO_u8_PIN7)&& (Copy_u8Val <= DIO_u8_PIN_HIGH)){
 35c:	68 30       	cpi	r22, 0x08	; 8
 35e:	08 f0       	brcs	.+2      	; 0x362 <DIO_u8SetPinValue+0x6>
 360:	60 c0       	rjmp	.+192    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 362:	42 30       	cpi	r20, 0x02	; 2
 364:	08 f0       	brcs	.+2      	; 0x368 <DIO_u8SetPinValue+0xc>
 366:	5f c0       	rjmp	.+190    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		switch(Copy_u8Port)
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	e1 f0       	breq	.+56     	; 0x3a4 <DIO_u8SetPinValue+0x48>
 36c:	30 f0       	brcs	.+12     	; 0x37a <DIO_u8SetPinValue+0x1e>
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	71 f1       	breq	.+92     	; 0x3ce <DIO_u8SetPinValue+0x72>
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	09 f4       	brne	.+2      	; 0x378 <DIO_u8SetPinValue+0x1c>
 376:	40 c0       	rjmp	.+128    	; 0x3f8 <DIO_u8SetPinValue+0x9c>
 378:	58 c0       	rjmp	.+176    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
 37a:	2b b3       	in	r18, 0x1b	; 27
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	06 2e       	mov	r0, r22
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_u8SetPinValue+0x2c>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_u8SetPinValue+0x28>
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8SetPinValue+0x38>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8SetPinValue+0x34>
 398:	80 95       	com	r24
 39a:	82 23       	and	r24, r18
 39c:	48 2b       	or	r20, r24
 39e:	4b bb       	out	0x1b, r20	; 27

#include "DIO_interface.h"
#include "DIO_reg.h"
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_u8PinNum <= DIO_u8_PIN7)&& (Copy_u8Val <= DIO_u8_PIN_HIGH)){
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
 3a2:	08 95       	ret
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
 3a4:	28 b3       	in	r18, 0x18	; 24
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	06 2e       	mov	r0, r22
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_u8SetPinValue+0x56>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_u8SetPinValue+0x52>
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_u8SetPinValue+0x62>
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_u8SetPinValue+0x5e>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	48 2b       	or	r20, r24
 3c8:	48 bb       	out	0x18, r20	; 24

#include "DIO_interface.h"
#include "DIO_reg.h"
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_u8PinNum <= DIO_u8_PIN7)&& (Copy_u8Val <= DIO_u8_PIN_HIGH)){
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
 3cc:	08 95       	ret
			case DIO_u8_PORTC : ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
 3ce:	25 b3       	in	r18, 0x15	; 21
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	06 2e       	mov	r0, r22
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8SetPinValue+0x80>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8SetPinValue+0x7c>
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8SetPinValue+0x8c>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8SetPinValue+0x88>
 3ec:	80 95       	com	r24
 3ee:	82 23       	and	r24, r18
 3f0:	48 2b       	or	r20, r24
 3f2:	45 bb       	out	0x15, r20	; 21

#include "DIO_interface.h"
#include "DIO_reg.h"
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_u8PinNum <= DIO_u8_PIN7)&& (Copy_u8Val <= DIO_u8_PIN_HIGH)){
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTC : ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
 3f6:	08 95       	ret
			case DIO_u8_PORTD : ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
 3f8:	22 b3       	in	r18, 0x12	; 18
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	06 2e       	mov	r0, r22
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	48 2b       	or	r20, r24
 41c:	42 bb       	out	0x12, r20	; 18

#include "DIO_interface.h"
#include "DIO_reg.h"
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 41e:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTC : ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTD : ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
 420:	08 95       	ret
			default : Local_u8ErrorState = NOK; break;
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	08 95       	ret
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	08 95       	ret
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTC : ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
			case DIO_u8_PORTD : ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
			default : Local_u8ErrorState = NOK; break;
 42a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState = NOK;
	}
	return Local_u8ErrorState;
}
 42c:	08 95       	ret

Disassembly of section .text.DIO_u8SetPortValue:

00000bec <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
	switch(Copy_u8Port)
 bec:	81 30       	cpi	r24, 0x01	; 1
 bee:	49 f0       	breq	.+18     	; 0xc02 <DIO_u8SetPortValue+0x16>
 bf0:	28 f0       	brcs	.+10     	; 0xbfc <DIO_u8SetPortValue+0x10>
 bf2:	82 30       	cpi	r24, 0x02	; 2
 bf4:	49 f0       	breq	.+18     	; 0xc08 <DIO_u8SetPortValue+0x1c>
 bf6:	83 30       	cpi	r24, 0x03	; 3
 bf8:	51 f0       	breq	.+20     	; 0xc0e <DIO_u8SetPortValue+0x22>
 bfa:	0c c0       	rjmp	.+24     	; 0xc14 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
 bfc:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 bfe:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
 c00:	08 95       	ret
		case DIO_u8_PORTB : PORTB = Copy_u8Val; break;
 c02:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 c04:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
		case DIO_u8_PORTB : PORTB = Copy_u8Val; break;
 c06:	08 95       	ret
 		case DIO_u8_PORTC : PORTC = Copy_u8Val; break;
 c08:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 c0a:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
		case DIO_u8_PORTB : PORTB = Copy_u8Val; break;
 		case DIO_u8_PORTC : PORTC = Copy_u8Val; break;
 c0c:	08 95       	ret
		case DIO_u8_PORTD : PORTD = Copy_u8Val; break;
 c0e:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 c10:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
		case DIO_u8_PORTB : PORTB = Copy_u8Val; break;
 		case DIO_u8_PORTC : PORTC = Copy_u8Val; break;
		case DIO_u8_PORTD : PORTD = Copy_u8Val; break;
 c12:	08 95       	ret
		default : Local_u8ErrorState = NOK; break;
 c14:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 c16:	08 95       	ret

Disassembly of section .text.__vector_1:

00000880 <__vector_1>:
	return Local_u8ErrorState;
}
/*INT0 ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 880:	1f 92       	push	r1
 882:	0f 92       	push	r0
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	0f 92       	push	r0
 888:	11 24       	eor	r1, r1
 88a:	2f 93       	push	r18
 88c:	3f 93       	push	r19
 88e:	4f 93       	push	r20
 890:	5f 93       	push	r21
 892:	6f 93       	push	r22
 894:	7f 93       	push	r23
 896:	8f 93       	push	r24
 898:	9f 93       	push	r25
 89a:	af 93       	push	r26
 89c:	bf 93       	push	r27
 89e:	ef 93       	push	r30
 8a0:	ff 93       	push	r31
	if(EXTI_pvCallBackFunc[EXTI_u8_INT0] != NULL)
 8a2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <_end>
 8a6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <_end+0x1>
 8aa:	30 97       	sbiw	r30, 0x00	; 0
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__vector_1+0x30>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT0]();
 8ae:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 8b0:	ff 91       	pop	r31
 8b2:	ef 91       	pop	r30
 8b4:	bf 91       	pop	r27
 8b6:	af 91       	pop	r26
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	7f 91       	pop	r23
 8be:	6f 91       	pop	r22
 8c0:	5f 91       	pop	r21
 8c2:	4f 91       	pop	r20
 8c4:	3f 91       	pop	r19
 8c6:	2f 91       	pop	r18
 8c8:	0f 90       	pop	r0
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	0f 90       	pop	r0
 8ce:	1f 90       	pop	r1
 8d0:	18 95       	reti

Disassembly of section .text.__vector_2:

000008d2 <__vector_2>:
/*INT0 ISR*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 8d2:	1f 92       	push	r1
 8d4:	0f 92       	push	r0
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	0f 92       	push	r0
 8da:	11 24       	eor	r1, r1
 8dc:	2f 93       	push	r18
 8de:	3f 93       	push	r19
 8e0:	4f 93       	push	r20
 8e2:	5f 93       	push	r21
 8e4:	6f 93       	push	r22
 8e6:	7f 93       	push	r23
 8e8:	8f 93       	push	r24
 8ea:	9f 93       	push	r25
 8ec:	af 93       	push	r26
 8ee:	bf 93       	push	r27
 8f0:	ef 93       	push	r30
 8f2:	ff 93       	push	r31
	if(EXTI_pvCallBackFunc[EXTI_u8_INT1] != NULL)
 8f4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <_end+0x2>
 8f8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <_end+0x3>
 8fc:	30 97       	sbiw	r30, 0x00	; 0
 8fe:	09 f0       	breq	.+2      	; 0x902 <__vector_2+0x30>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT1]();
 900:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}}
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	7f 91       	pop	r23
 910:	6f 91       	pop	r22
 912:	5f 91       	pop	r21
 914:	4f 91       	pop	r20
 916:	3f 91       	pop	r19
 918:	2f 91       	pop	r18
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

Disassembly of section .text.__vector_3:

00000924 <__vector_3>:
/*INT0 ISR*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 924:	1f 92       	push	r1
 926:	0f 92       	push	r0
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	0f 92       	push	r0
 92c:	11 24       	eor	r1, r1
 92e:	2f 93       	push	r18
 930:	3f 93       	push	r19
 932:	4f 93       	push	r20
 934:	5f 93       	push	r21
 936:	6f 93       	push	r22
 938:	7f 93       	push	r23
 93a:	8f 93       	push	r24
 93c:	9f 93       	push	r25
 93e:	af 93       	push	r26
 940:	bf 93       	push	r27
 942:	ef 93       	push	r30
 944:	ff 93       	push	r31
	if(EXTI_pvCallBackFunc[EXTI_u8_INT2] != NULL)
 946:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <_end+0x4>
 94a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <_end+0x5>
 94e:	30 97       	sbiw	r30, 0x00	; 0
 950:	09 f0       	breq	.+2      	; 0x954 <__vector_3+0x30>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT2]();
 952:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}}
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	bf 91       	pop	r27
 95a:	af 91       	pop	r26
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	7f 91       	pop	r23
 962:	6f 91       	pop	r22
 964:	5f 91       	pop	r21
 966:	4f 91       	pop	r20
 968:	3f 91       	pop	r19
 96a:	2f 91       	pop	r18
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

Disassembly of section .text.GIE_voidEnableGlobal:

00000e88 <GIE_voidEnableGlobal>:
#include "../../LIBRARY/BIT_MATH.h"


void GIE_voidEnableGlobal(void)
{
	__asm volatile("SEI");
 e88:	78 94       	sei
 e8a:	08 95       	ret

Disassembly of section .text.PORT_voidInit:

00000db6 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void){
	DDRA = PORTA_DIR;
 db6:	8f ef       	ldi	r24, 0xFF	; 255
 db8:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 dba:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 dbc:	8f e0       	ldi	r24, 0x0F	; 15
 dbe:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 dc0:	80 e2       	ldi	r24, 0x20	; 32
 dc2:	81 bb       	out	0x11, r24	; 17

	PORTA = PORTA_INIT_VAL;
 dc4:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_INIT_VAL;
 dc6:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INIT_VAL;
 dc8:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INIT_VAL;
 dca:	12 ba       	out	0x12, r1	; 18
 dcc:	08 95       	ret

Disassembly of section .text.PWM0_VoidInit:

00000d44 <PWM0_VoidInit>:

void PWM0_VoidInit(void){
	/* Configuring timer0 registers
	 * to fast PWM mode
	 *  */
		SET_BIT(TCCR0,TCCR0_WGM00);
 d44:	83 b7       	in	r24, 0x33	; 51
 d46:	80 64       	ori	r24, 0x40	; 64
 d48:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,TCCR0_WGM01);
 d4a:	83 b7       	in	r24, 0x33	; 51
 d4c:	88 60       	ori	r24, 0x08	; 8
 d4e:	83 bf       	out	0x33, r24	; 51
	/* inverted PWM mode
	 * Set OC0 on compare match, clear OC0 at overflow
	 * when timerCount = OCR0, set OC0 -> PB3 pin else
	 * */
		SET_BIT(TCCR0,TCCR0_COM00);
 d50:	83 b7       	in	r24, 0x33	; 51
 d52:	80 61       	ori	r24, 0x10	; 16
 d54:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,TCCR0_COM01);
 d56:	83 b7       	in	r24, 0x33	; 51
 d58:	80 62       	ori	r24, 0x20	; 32
 d5a:	83 bf       	out	0x33, r24	; 51
	/* no prescale
	 * and start timer0*/
		SET_BIT(TCCR0,TCCR0_CS00);
 d5c:	83 b7       	in	r24, 0x33	; 51
 d5e:	81 60       	ori	r24, 0x01	; 1
 d60:	83 bf       	out	0x33, r24	; 51
 d62:	08 95       	ret

Disassembly of section .text.PWM0_VoidSetDutyCycle:

00000af0 <PWM0_VoidSetDutyCycle>:
}


void PWM0_VoidSetDutyCycle(uint8 Copy_u8DutyCycle){
	// OCR0 holds the on time of the cycle
	OCR0 = 255 - ((float32)Copy_u8DutyCycle / 100.0f) * 255.0f;
 af0:	68 2f       	mov	r22, r24
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 43 03 	call	0x686	; 0x686 <__floatunsisf>
 afc:	20 e0       	ldi	r18, 0x00	; 0
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	48 ec       	ldi	r20, 0xC8	; 200
 b02:	52 e4       	ldi	r21, 0x42	; 66
 b04:	0e 94 34 07 	call	0xe68	; 0xe68 <__divsf3>
 b08:	20 e0       	ldi	r18, 0x00	; 0
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	4f e7       	ldi	r20, 0x7F	; 127
 b0e:	53 e4       	ldi	r21, 0x43	; 67
 b10:	0e 94 38 07 	call	0xe70	; 0xe70 <__mulsf3>
 b14:	9b 01       	movw	r18, r22
 b16:	ac 01       	movw	r20, r24
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	8f e7       	ldi	r24, 0x7F	; 127
 b1e:	93 e4       	ldi	r25, 0x43	; 67
 b20:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__subsf3>
 b24:	0e 94 b9 03 	call	0x772	; 0x772 <__fixunssfsi>
 b28:	6c bf       	out	0x3c, r22	; 60
 b2a:	08 95       	ret

Disassembly of section .text.TIMEROvf_u8Enable:

00000bbe <TIMEROvf_u8Enable>:
		SET_BIT(TIMSK,TIMSK_OCIE0);
}

uint8 TIMEROvf_u8Enable(uint8 Copy_u8TimerNumber){
	uint8 Local_u8ErrorState = OK;
	switch(Copy_u8TimerNumber){
 bbe:	81 30       	cpi	r24, 0x01	; 1
 bc0:	49 f0       	breq	.+18     	; 0xbd4 <TIMEROvf_u8Enable+0x16>
 bc2:	18 f0       	brcs	.+6      	; 0xbca <TIMEROvf_u8Enable+0xc>
 bc4:	82 30       	cpi	r24, 0x02	; 2
 bc6:	59 f0       	breq	.+22     	; 0xbde <TIMEROvf_u8Enable+0x20>
 bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <TIMEROvf_u8Enable+0x2a>
	case TIMER0:
		SET_BIT(TIMSK, TIMSK_TOIE0);
 bca:	89 b7       	in	r24, 0x39	; 57
 bcc:	81 60       	ori	r24, 0x01	; 1
 bce:	89 bf       	out	0x39, r24	; 57
	/*Compare mode interrupt enable*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
}

uint8 TIMEROvf_u8Enable(uint8 Copy_u8TimerNumber){
	uint8 Local_u8ErrorState = OK;
 bd0:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8TimerNumber){
	case TIMER0:
		SET_BIT(TIMSK, TIMSK_TOIE0);
		break;
 bd2:	08 95       	ret
	case TIMER1:
		SET_BIT(TIMSK, TIMSK_TOIE1);
 bd4:	89 b7       	in	r24, 0x39	; 57
 bd6:	84 60       	ori	r24, 0x04	; 4
 bd8:	89 bf       	out	0x39, r24	; 57
	/*Compare mode interrupt enable*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
}

uint8 TIMEROvf_u8Enable(uint8 Copy_u8TimerNumber){
	uint8 Local_u8ErrorState = OK;
 bda:	80 e0       	ldi	r24, 0x00	; 0
	case TIMER0:
		SET_BIT(TIMSK, TIMSK_TOIE0);
		break;
	case TIMER1:
		SET_BIT(TIMSK, TIMSK_TOIE1);
		break;
 bdc:	08 95       	ret
	case TIMER2:
		SET_BIT(TIMSK, TIMSK_TOIE2);
 bde:	89 b7       	in	r24, 0x39	; 57
 be0:	80 64       	ori	r24, 0x40	; 64
 be2:	89 bf       	out	0x39, r24	; 57
	/*Compare mode interrupt enable*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
}

uint8 TIMEROvf_u8Enable(uint8 Copy_u8TimerNumber){
	uint8 Local_u8ErrorState = OK;
 be4:	80 e0       	ldi	r24, 0x00	; 0
	case TIMER1:
		SET_BIT(TIMSK, TIMSK_TOIE1);
		break;
	case TIMER2:
		SET_BIT(TIMSK, TIMSK_TOIE2);
		break;
 be6:	08 95       	ret
	default:
		Local_u8ErrorState = NOK;
 be8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return Local_u8ErrorState;

}
 bea:	08 95       	ret

Disassembly of section .text.__vector_11:

00000976 <__vector_11>:
	/*CLK SET PRESCALER = 64*/
		SET_BIT(TCCR0,TCCR0_CS00);
		SET_BIT(TCCR0,TCCR0_CS01);
		CLR_BIT(TCCR0,TCCR0_CS02);
	/*Compare mode interrupt enable*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	2f 93       	push	r18
 982:	3f 93       	push	r19
 984:	4f 93       	push	r20
 986:	5f 93       	push	r21
 988:	6f 93       	push	r22
 98a:	7f 93       	push	r23
 98c:	8f 93       	push	r24
 98e:	9f 93       	push	r25
 990:	af 93       	push	r26
 992:	bf 93       	push	r27
 994:	ef 93       	push	r30
 996:	ff 93       	push	r31
 998:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Timer0ovf_pvCallBackFunc>
 99c:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Timer0ovf_pvCallBackFunc+0x1>
 9a0:	30 97       	sbiw	r30, 0x00	; 0
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__vector_11+0x30>
 9a4:	09 95       	icall
 9a6:	ff 91       	pop	r31
 9a8:	ef 91       	pop	r30
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

Disassembly of section .text.__vector_10:

000009c8 <__vector_10>:
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	ef 93       	push	r30
 9e8:	ff 93       	push	r31
 9ea:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Timer0ovf_pvCallBackFunc>
 9ee:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Timer0ovf_pvCallBackFunc+0x1>
 9f2:	30 97       	sbiw	r30, 0x00	; 0
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__vector_10+0x30>
 9f6:	09 95       	icall
 9f8:	ff 91       	pop	r31
 9fa:	ef 91       	pop	r30
 9fc:	bf 91       	pop	r27
 9fe:	af 91       	pop	r26
 a00:	9f 91       	pop	r25
 a02:	8f 91       	pop	r24
 a04:	7f 91       	pop	r23
 a06:	6f 91       	pop	r22
 a08:	5f 91       	pop	r21
 a0a:	4f 91       	pop	r20
 a0c:	3f 91       	pop	r19
 a0e:	2f 91       	pop	r18
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

Disassembly of section .text:

00000e1c <__subsf3>:
 e1c:	50 58       	subi	r21, 0x80	; 128

00000e1e <__addsf3>:
 e1e:	bb 27       	eor	r27, r27
 e20:	aa 27       	eor	r26, r26
 e22:	0e 94 17 02 	call	0x42e	; 0x42e <__addsf3x>
 e26:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_round>

Disassembly of section .text:

0000042e <__addsf3x>:
 42e:	11 c0       	rjmp	.+34     	; 0x452 <__addsf3x+0x24>
 430:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_pscA>
 434:	38 f0       	brcs	.+14     	; 0x444 <__addsf3x+0x16>
 436:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fp_pscB>
 43a:	20 f0       	brcs	.+8      	; 0x444 <__addsf3x+0x16>
 43c:	39 f4       	brne	.+14     	; 0x44c <__addsf3x+0x1e>
 43e:	9f 3f       	cpi	r25, 0xFF	; 255
 440:	19 f4       	brne	.+6      	; 0x448 <__addsf3x+0x1a>
 442:	26 f4       	brtc	.+8      	; 0x44c <__addsf3x+0x1e>
 444:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__fp_nan>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3x+0x1e>
 44a:	e0 95       	com	r30
 44c:	e7 fb       	bst	r30, 7
 44e:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_inf>
 452:	e9 2f       	mov	r30, r25
 454:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_split3>
 458:	58 f3       	brcs	.-42     	; 0x430 <__addsf3x+0x2>
 45a:	ba 17       	cp	r27, r26
 45c:	62 07       	cpc	r22, r18
 45e:	73 07       	cpc	r23, r19
 460:	84 07       	cpc	r24, r20
 462:	95 07       	cpc	r25, r21
 464:	20 f0       	brcs	.+8      	; 0x46e <__addsf3x+0x40>
 466:	79 f4       	brne	.+30     	; 0x486 <__addsf3x+0x58>
 468:	a6 f5       	brtc	.+104    	; 0x4d2 <__addsf3x+0xa4>
 46a:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_zero>
 46e:	0e f4       	brtc	.+2      	; 0x472 <__addsf3x+0x44>
 470:	e0 95       	com	r30
 472:	0b 2e       	mov	r0, r27
 474:	ba 2f       	mov	r27, r26
 476:	a0 2d       	mov	r26, r0
 478:	0b 01       	movw	r0, r22
 47a:	b9 01       	movw	r22, r18
 47c:	90 01       	movw	r18, r0
 47e:	0c 01       	movw	r0, r24
 480:	ca 01       	movw	r24, r20
 482:	a0 01       	movw	r20, r0
 484:	11 24       	eor	r1, r1
 486:	ff 27       	eor	r31, r31
 488:	59 1b       	sub	r21, r25
 48a:	99 f0       	breq	.+38     	; 0x4b2 <__addsf3x+0x84>
 48c:	59 3f       	cpi	r21, 0xF9	; 249
 48e:	50 f4       	brcc	.+20     	; 0x4a4 <__addsf3x+0x76>
 490:	50 3e       	cpi	r21, 0xE0	; 224
 492:	68 f1       	brcs	.+90     	; 0x4ee <__addsf3x+0xc0>
 494:	1a 16       	cp	r1, r26
 496:	f0 40       	sbci	r31, 0x00	; 0
 498:	a2 2f       	mov	r26, r18
 49a:	23 2f       	mov	r18, r19
 49c:	34 2f       	mov	r19, r20
 49e:	44 27       	eor	r20, r20
 4a0:	58 5f       	subi	r21, 0xF8	; 248
 4a2:	f3 cf       	rjmp	.-26     	; 0x48a <__addsf3x+0x5c>
 4a4:	46 95       	lsr	r20
 4a6:	37 95       	ror	r19
 4a8:	27 95       	ror	r18
 4aa:	a7 95       	ror	r26
 4ac:	f0 40       	sbci	r31, 0x00	; 0
 4ae:	53 95       	inc	r21
 4b0:	c9 f7       	brne	.-14     	; 0x4a4 <__addsf3x+0x76>
 4b2:	7e f4       	brtc	.+30     	; 0x4d2 <__addsf3x+0xa4>
 4b4:	1f 16       	cp	r1, r31
 4b6:	ba 0b       	sbc	r27, r26
 4b8:	62 0b       	sbc	r22, r18
 4ba:	73 0b       	sbc	r23, r19
 4bc:	84 0b       	sbc	r24, r20
 4be:	ba f0       	brmi	.+46     	; 0x4ee <__addsf3x+0xc0>
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	a1 f0       	breq	.+40     	; 0x4ec <__addsf3x+0xbe>
 4c4:	ff 0f       	add	r31, r31
 4c6:	bb 1f       	adc	r27, r27
 4c8:	66 1f       	adc	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	c2 f7       	brpl	.-16     	; 0x4c0 <__addsf3x+0x92>
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <__addsf3x+0xc0>
 4d2:	ba 0f       	add	r27, r26
 4d4:	62 1f       	adc	r22, r18
 4d6:	73 1f       	adc	r23, r19
 4d8:	84 1f       	adc	r24, r20
 4da:	48 f4       	brcc	.+18     	; 0x4ee <__addsf3x+0xc0>
 4dc:	87 95       	ror	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b7 95       	ror	r27
 4e4:	f7 95       	ror	r31
 4e6:	9e 3f       	cpi	r25, 0xFE	; 254
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <__addsf3x+0xbe>
 4ea:	b0 cf       	rjmp	.-160    	; 0x44c <__addsf3x+0x1e>
 4ec:	93 95       	inc	r25
 4ee:	88 0f       	add	r24, r24
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <__addsf3x+0xc6>
 4f2:	99 27       	eor	r25, r25
 4f4:	ee 0f       	add	r30, r30
 4f6:	97 95       	ror	r25
 4f8:	87 95       	ror	r24
 4fa:	08 95       	ret

Disassembly of section .text:

00000e68 <__divsf3>:
 e68:	0e 94 69 00 	call	0xd2	; 0xd2 <__divsf3x>
 e6c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_round>

Disassembly of section .text:

000000d2 <__divsf3x>:
  d2:	10 c0       	rjmp	.+32     	; 0xf4 <__divsf3x+0x22>
  d4:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fp_pscB>
  d8:	58 f0       	brcs	.+22     	; 0xf0 <__divsf3x+0x1e>
  da:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_pscA>
  de:	40 f0       	brcs	.+16     	; 0xf0 <__divsf3x+0x1e>
  e0:	29 f4       	brne	.+10     	; 0xec <__divsf3x+0x1a>
  e2:	5f 3f       	cpi	r21, 0xFF	; 255
  e4:	29 f0       	breq	.+10     	; 0xf0 <__divsf3x+0x1e>
  e6:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_inf>
  ea:	51 11       	cpse	r21, r1
  ec:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_szero>
  f0:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__fp_nan>
  f4:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_split3>
  f8:	68 f3       	brcs	.-38     	; 0xd4 <__divsf3x+0x2>

000000fa <__divsf3_pse>:
  fa:	99 23       	and	r25, r25
  fc:	b1 f3       	breq	.-20     	; 0xea <__divsf3x+0x18>
  fe:	55 23       	and	r21, r21
 100:	91 f3       	breq	.-28     	; 0xe6 <__divsf3x+0x14>
 102:	95 1b       	sub	r25, r21
 104:	55 0b       	sbc	r21, r21
 106:	bb 27       	eor	r27, r27
 108:	aa 27       	eor	r26, r26
 10a:	62 17       	cp	r22, r18
 10c:	73 07       	cpc	r23, r19
 10e:	84 07       	cpc	r24, r20
 110:	38 f0       	brcs	.+14     	; 0x120 <__divsf3_pse+0x26>
 112:	9f 5f       	subi	r25, 0xFF	; 255
 114:	5f 4f       	sbci	r21, 0xFF	; 255
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	aa 1f       	adc	r26, r26
 11e:	a9 f3       	breq	.-22     	; 0x10a <__divsf3_pse+0x10>
 120:	35 d0       	rcall	.+106    	; 0x18c <__divsf3_pse+0x92>
 122:	0e 2e       	mov	r0, r30
 124:	3a f0       	brmi	.+14     	; 0x134 <__divsf3_pse+0x3a>
 126:	e0 e8       	ldi	r30, 0x80	; 128
 128:	32 d0       	rcall	.+100    	; 0x18e <__divsf3_pse+0x94>
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	50 40       	sbci	r21, 0x00	; 0
 12e:	e6 95       	lsr	r30
 130:	00 1c       	adc	r0, r0
 132:	ca f7       	brpl	.-14     	; 0x126 <__divsf3_pse+0x2c>
 134:	2b d0       	rcall	.+86     	; 0x18c <__divsf3_pse+0x92>
 136:	fe 2f       	mov	r31, r30
 138:	29 d0       	rcall	.+82     	; 0x18c <__divsf3_pse+0x92>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	88 1f       	adc	r24, r24
 140:	bb 1f       	adc	r27, r27
 142:	26 17       	cp	r18, r22
 144:	37 07       	cpc	r19, r23
 146:	48 07       	cpc	r20, r24
 148:	ab 07       	cpc	r26, r27
 14a:	b0 e8       	ldi	r27, 0x80	; 128
 14c:	09 f0       	breq	.+2      	; 0x150 <__divsf3_pse+0x56>
 14e:	bb 0b       	sbc	r27, r27
 150:	80 2d       	mov	r24, r0
 152:	bf 01       	movw	r22, r30
 154:	ff 27       	eor	r31, r31
 156:	93 58       	subi	r25, 0x83	; 131
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	3a f0       	brmi	.+14     	; 0x16a <__divsf3_pse+0x70>
 15c:	9e 3f       	cpi	r25, 0xFE	; 254
 15e:	51 05       	cpc	r21, r1
 160:	78 f0       	brcs	.+30     	; 0x180 <__divsf3_pse+0x86>
 162:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_inf>
 166:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_szero>
 16a:	5f 3f       	cpi	r21, 0xFF	; 255
 16c:	e4 f3       	brlt	.-8      	; 0x166 <__divsf3_pse+0x6c>
 16e:	98 3e       	cpi	r25, 0xE8	; 232
 170:	d4 f3       	brlt	.-12     	; 0x166 <__divsf3_pse+0x6c>
 172:	86 95       	lsr	r24
 174:	77 95       	ror	r23
 176:	67 95       	ror	r22
 178:	b7 95       	ror	r27
 17a:	f7 95       	ror	r31
 17c:	9f 5f       	subi	r25, 0xFF	; 255
 17e:	c9 f7       	brne	.-14     	; 0x172 <__divsf3_pse+0x78>
 180:	88 0f       	add	r24, r24
 182:	91 1d       	adc	r25, r1
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	97 f9       	bld	r25, 7
 18a:	08 95       	ret
 18c:	e1 e0       	ldi	r30, 0x01	; 1
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	88 1f       	adc	r24, r24
 194:	bb 1f       	adc	r27, r27
 196:	62 17       	cp	r22, r18
 198:	73 07       	cpc	r23, r19
 19a:	84 07       	cpc	r24, r20
 19c:	ba 07       	cpc	r27, r26
 19e:	20 f0       	brcs	.+8      	; 0x1a8 <__divsf3_pse+0xae>
 1a0:	62 1b       	sub	r22, r18
 1a2:	73 0b       	sbc	r23, r19
 1a4:	84 0b       	sbc	r24, r20
 1a6:	ba 0b       	sbc	r27, r26
 1a8:	ee 1f       	adc	r30, r30
 1aa:	88 f7       	brcc	.-30     	; 0x18e <__divsf3_pse+0x94>
 1ac:	e0 95       	com	r30
 1ae:	08 95       	ret

Disassembly of section .text:

00000772 <__fixunssfsi>:
 772:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_splitA>
 776:	88 f0       	brcs	.+34     	; 0x79a <__fixunssfsi+0x28>
 778:	9f 57       	subi	r25, 0x7F	; 127
 77a:	98 f0       	brcs	.+38     	; 0x7a2 <__fixunssfsi+0x30>
 77c:	b9 2f       	mov	r27, r25
 77e:	99 27       	eor	r25, r25
 780:	b7 51       	subi	r27, 0x17	; 23
 782:	b0 f0       	brcs	.+44     	; 0x7b0 <__fixunssfsi+0x3e>
 784:	e1 f0       	breq	.+56     	; 0x7be <__fixunssfsi+0x4c>
 786:	66 0f       	add	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	1a f0       	brmi	.+6      	; 0x796 <__fixunssfsi+0x24>
 790:	ba 95       	dec	r27
 792:	c9 f7       	brne	.-14     	; 0x786 <__fixunssfsi+0x14>
 794:	14 c0       	rjmp	.+40     	; 0x7be <__fixunssfsi+0x4c>
 796:	b1 30       	cpi	r27, 0x01	; 1
 798:	91 f0       	breq	.+36     	; 0x7be <__fixunssfsi+0x4c>
 79a:	0e 94 23 07 	call	0xe46	; 0xe46 <__fp_zero>
 79e:	b1 e0       	ldi	r27, 0x01	; 1
 7a0:	08 95       	ret
 7a2:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_zero>
 7a6:	67 2f       	mov	r22, r23
 7a8:	78 2f       	mov	r23, r24
 7aa:	88 27       	eor	r24, r24
 7ac:	b8 5f       	subi	r27, 0xF8	; 248
 7ae:	39 f0       	breq	.+14     	; 0x7be <__fixunssfsi+0x4c>
 7b0:	b9 3f       	cpi	r27, 0xF9	; 249
 7b2:	cc f3       	brlt	.-14     	; 0x7a6 <__fixunssfsi+0x34>
 7b4:	86 95       	lsr	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b3 95       	inc	r27
 7bc:	d9 f7       	brne	.-10     	; 0x7b4 <__fixunssfsi+0x42>
 7be:	3e f4       	brtc	.+14     	; 0x7ce <__fixunssfsi+0x5c>
 7c0:	90 95       	com	r25
 7c2:	80 95       	com	r24
 7c4:	70 95       	com	r23
 7c6:	61 95       	neg	r22
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	08 95       	ret

Disassembly of section .text:

00000686 <__floatunsisf>:
 686:	e8 94       	clt
 688:	09 c0       	rjmp	.+18     	; 0x69c <__floatsisf+0x12>

0000068a <__floatsisf>:
 68a:	97 fb       	bst	r25, 7
 68c:	3e f4       	brtc	.+14     	; 0x69c <__floatsisf+0x12>
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	99 23       	and	r25, r25
 69e:	a9 f0       	breq	.+42     	; 0x6ca <__floatsisf+0x40>
 6a0:	f9 2f       	mov	r31, r25
 6a2:	96 e9       	ldi	r25, 0x96	; 150
 6a4:	bb 27       	eor	r27, r27
 6a6:	93 95       	inc	r25
 6a8:	f6 95       	lsr	r31
 6aa:	87 95       	ror	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f1 11       	cpse	r31, r1
 6b4:	f8 cf       	rjmp	.-16     	; 0x6a6 <__floatsisf+0x1c>
 6b6:	fa f4       	brpl	.+62     	; 0x6f6 <__floatsisf+0x6c>
 6b8:	bb 0f       	add	r27, r27
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__floatsisf+0x36>
 6bc:	60 ff       	sbrs	r22, 0
 6be:	1b c0       	rjmp	.+54     	; 0x6f6 <__floatsisf+0x6c>
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	16 c0       	rjmp	.+44     	; 0x6f6 <__floatsisf+0x6c>
 6ca:	88 23       	and	r24, r24
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__floatsisf+0x48>
 6ce:	96 e9       	ldi	r25, 0x96	; 150
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <__floatsisf+0x6a>
 6d2:	77 23       	and	r23, r23
 6d4:	21 f0       	breq	.+8      	; 0x6de <__floatsisf+0x54>
 6d6:	9e e8       	ldi	r25, 0x8E	; 142
 6d8:	87 2f       	mov	r24, r23
 6da:	76 2f       	mov	r23, r22
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <__floatsisf+0x5e>
 6de:	66 23       	and	r22, r22
 6e0:	71 f0       	breq	.+28     	; 0x6fe <__floatsisf+0x74>
 6e2:	96 e8       	ldi	r25, 0x86	; 134
 6e4:	86 2f       	mov	r24, r22
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	2a f0       	brmi	.+10     	; 0x6f6 <__floatsisf+0x6c>
 6ec:	9a 95       	dec	r25
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	da f7       	brpl	.-10     	; 0x6ec <__floatsisf+0x62>
 6f6:	88 0f       	add	r24, r24
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

Disassembly of section .text:

00000e54 <__fp_inf>:
 e54:	97 f9       	bld	r25, 7
 e56:	9f 67       	ori	r25, 0x7F	; 127
 e58:	80 e8       	ldi	r24, 0x80	; 128
 e5a:	70 e0       	ldi	r23, 0x00	; 0
 e5c:	60 e0       	ldi	r22, 0x00	; 0
 e5e:	08 95       	ret

Disassembly of section .text:

00000e7e <__fp_nan>:
 e7e:	9f ef       	ldi	r25, 0xFF	; 255
 e80:	80 ec       	ldi	r24, 0xC0	; 192
 e82:	08 95       	ret

Disassembly of section .text:

00000e2a <__fp_pscA>:
 e2a:	00 24       	eor	r0, r0
 e2c:	0a 94       	dec	r0
 e2e:	16 16       	cp	r1, r22
 e30:	17 06       	cpc	r1, r23
 e32:	18 06       	cpc	r1, r24
 e34:	09 06       	cpc	r0, r25
 e36:	08 95       	ret

Disassembly of section .text:

00000e38 <__fp_pscB>:
 e38:	00 24       	eor	r0, r0
 e3a:	0a 94       	dec	r0
 e3c:	12 16       	cp	r1, r18
 e3e:	13 06       	cpc	r1, r19
 e40:	14 06       	cpc	r1, r20
 e42:	05 06       	cpc	r0, r21
 e44:	08 95       	ret

Disassembly of section .text:

00000d22 <__fp_round>:
 d22:	09 2e       	mov	r0, r25
 d24:	03 94       	inc	r0
 d26:	00 0c       	add	r0, r0
 d28:	11 f4       	brne	.+4      	; 0xd2e <__fp_round+0xc>
 d2a:	88 23       	and	r24, r24
 d2c:	52 f0       	brmi	.+20     	; 0xd42 <__fp_round+0x20>
 d2e:	bb 0f       	add	r27, r27
 d30:	40 f4       	brcc	.+16     	; 0xd42 <__fp_round+0x20>
 d32:	bf 2b       	or	r27, r31
 d34:	11 f4       	brne	.+4      	; 0xd3a <__fp_round+0x18>
 d36:	60 ff       	sbrs	r22, 0
 d38:	04 c0       	rjmp	.+8      	; 0xd42 <__fp_round+0x20>
 d3a:	6f 5f       	subi	r22, 0xFF	; 255
 d3c:	7f 4f       	sbci	r23, 0xFF	; 255
 d3e:	8f 4f       	sbci	r24, 0xFF	; 255
 d40:	9f 4f       	sbci	r25, 0xFF	; 255
 d42:	08 95       	ret

Disassembly of section .text:

00000a68 <__fp_split3>:
 a68:	57 fd       	sbrc	r21, 7
 a6a:	90 58       	subi	r25, 0x80	; 128
 a6c:	44 0f       	add	r20, r20
 a6e:	55 1f       	adc	r21, r21
 a70:	59 f0       	breq	.+22     	; 0xa88 <__fp_splitA+0x10>
 a72:	5f 3f       	cpi	r21, 0xFF	; 255
 a74:	71 f0       	breq	.+28     	; 0xa92 <__fp_splitA+0x1a>
 a76:	47 95       	ror	r20

00000a78 <__fp_splitA>:
 a78:	88 0f       	add	r24, r24
 a7a:	97 fb       	bst	r25, 7
 a7c:	99 1f       	adc	r25, r25
 a7e:	61 f0       	breq	.+24     	; 0xa98 <__fp_splitA+0x20>
 a80:	9f 3f       	cpi	r25, 0xFF	; 255
 a82:	79 f0       	breq	.+30     	; 0xaa2 <__fp_splitA+0x2a>
 a84:	87 95       	ror	r24
 a86:	08 95       	ret
 a88:	12 16       	cp	r1, r18
 a8a:	13 06       	cpc	r1, r19
 a8c:	14 06       	cpc	r1, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	f2 cf       	rjmp	.-28     	; 0xa76 <__fp_split3+0xe>
 a92:	46 95       	lsr	r20
 a94:	f1 df       	rcall	.-30     	; 0xa78 <__fp_splitA>
 a96:	08 c0       	rjmp	.+16     	; 0xaa8 <__fp_splitA+0x30>
 a98:	16 16       	cp	r1, r22
 a9a:	17 06       	cpc	r1, r23
 a9c:	18 06       	cpc	r1, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	f1 cf       	rjmp	.-30     	; 0xa84 <__fp_splitA+0xc>
 aa2:	86 95       	lsr	r24
 aa4:	71 05       	cpc	r23, r1
 aa6:	61 05       	cpc	r22, r1
 aa8:	08 94       	sec
 aaa:	08 95       	ret

Disassembly of section .text:

00000e46 <__fp_zero>:
 e46:	e8 94       	clt

00000e48 <__fp_szero>:
 e48:	bb 27       	eor	r27, r27
 e4a:	66 27       	eor	r22, r22
 e4c:	77 27       	eor	r23, r23
 e4e:	cb 01       	movw	r24, r22
 e50:	97 f9       	bld	r25, 7
 e52:	08 95       	ret

Disassembly of section .text:

00000e70 <__mulsf3>:
 e70:	0e 94 44 01 	call	0x288	; 0x288 <__mulsf3x>
 e74:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_round>

Disassembly of section .text:

00000288 <__mulsf3x>:
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <__mulsf3x+0x20>
 28a:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_pscA>
 28e:	38 f0       	brcs	.+14     	; 0x29e <__mulsf3x+0x16>
 290:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fp_pscB>
 294:	20 f0       	brcs	.+8      	; 0x29e <__mulsf3x+0x16>
 296:	95 23       	and	r25, r21
 298:	11 f0       	breq	.+4      	; 0x29e <__mulsf3x+0x16>
 29a:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_inf>
 29e:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__fp_nan>
 2a2:	11 24       	eor	r1, r1
 2a4:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_szero>
 2a8:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_split3>
 2ac:	70 f3       	brcs	.-36     	; 0x28a <__mulsf3x+0x2>

000002ae <__mulsf3_pse>:
 2ae:	95 9f       	mul	r25, r21
 2b0:	c1 f3       	breq	.-16     	; 0x2a2 <__mulsf3x+0x1a>
 2b2:	95 0f       	add	r25, r21
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	55 1f       	adc	r21, r21
 2b8:	62 9f       	mul	r22, r18
 2ba:	f0 01       	movw	r30, r0
 2bc:	72 9f       	mul	r23, r18
 2be:	bb 27       	eor	r27, r27
 2c0:	f0 0d       	add	r31, r0
 2c2:	b1 1d       	adc	r27, r1
 2c4:	63 9f       	mul	r22, r19
 2c6:	aa 27       	eor	r26, r26
 2c8:	f0 0d       	add	r31, r0
 2ca:	b1 1d       	adc	r27, r1
 2cc:	aa 1f       	adc	r26, r26
 2ce:	64 9f       	mul	r22, r20
 2d0:	66 27       	eor	r22, r22
 2d2:	b0 0d       	add	r27, r0
 2d4:	a1 1d       	adc	r26, r1
 2d6:	66 1f       	adc	r22, r22
 2d8:	82 9f       	mul	r24, r18
 2da:	22 27       	eor	r18, r18
 2dc:	b0 0d       	add	r27, r0
 2de:	a1 1d       	adc	r26, r1
 2e0:	62 1f       	adc	r22, r18
 2e2:	73 9f       	mul	r23, r19
 2e4:	b0 0d       	add	r27, r0
 2e6:	a1 1d       	adc	r26, r1
 2e8:	62 1f       	adc	r22, r18
 2ea:	83 9f       	mul	r24, r19
 2ec:	a0 0d       	add	r26, r0
 2ee:	61 1d       	adc	r22, r1
 2f0:	22 1f       	adc	r18, r18
 2f2:	74 9f       	mul	r23, r20
 2f4:	33 27       	eor	r19, r19
 2f6:	a0 0d       	add	r26, r0
 2f8:	61 1d       	adc	r22, r1
 2fa:	23 1f       	adc	r18, r19
 2fc:	84 9f       	mul	r24, r20
 2fe:	60 0d       	add	r22, r0
 300:	21 1d       	adc	r18, r1
 302:	82 2f       	mov	r24, r18
 304:	76 2f       	mov	r23, r22
 306:	6a 2f       	mov	r22, r26
 308:	11 24       	eor	r1, r1
 30a:	9f 57       	subi	r25, 0x7F	; 127
 30c:	50 40       	sbci	r21, 0x00	; 0
 30e:	9a f0       	brmi	.+38     	; 0x336 <__mulsf3_pse+0x88>
 310:	f1 f0       	breq	.+60     	; 0x34e <__mulsf3_pse+0xa0>
 312:	88 23       	and	r24, r24
 314:	4a f0       	brmi	.+18     	; 0x328 <__mulsf3_pse+0x7a>
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	bb 1f       	adc	r27, r27
 31c:	66 1f       	adc	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	88 1f       	adc	r24, r24
 322:	91 50       	subi	r25, 0x01	; 1
 324:	50 40       	sbci	r21, 0x00	; 0
 326:	a9 f7       	brne	.-22     	; 0x312 <__mulsf3_pse+0x64>
 328:	9e 3f       	cpi	r25, 0xFE	; 254
 32a:	51 05       	cpc	r21, r1
 32c:	80 f0       	brcs	.+32     	; 0x34e <__mulsf3_pse+0xa0>
 32e:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_inf>
 332:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_szero>
 336:	5f 3f       	cpi	r21, 0xFF	; 255
 338:	e4 f3       	brlt	.-8      	; 0x332 <__mulsf3_pse+0x84>
 33a:	98 3e       	cpi	r25, 0xE8	; 232
 33c:	d4 f3       	brlt	.-12     	; 0x332 <__mulsf3_pse+0x84>
 33e:	86 95       	lsr	r24
 340:	77 95       	ror	r23
 342:	67 95       	ror	r22
 344:	b7 95       	ror	r27
 346:	f7 95       	ror	r31
 348:	e7 95       	ror	r30
 34a:	9f 5f       	subi	r25, 0xFF	; 255
 34c:	c1 f7       	brne	.-16     	; 0x33e <__mulsf3_pse+0x90>
 34e:	fe 2b       	or	r31, r30
 350:	88 0f       	add	r24, r24
 352:	91 1d       	adc	r25, r1
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	97 f9       	bld	r25, 7
 35a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000aac <__udivmodsi4>:
 aac:	a1 e2       	ldi	r26, 0x21	; 33
 aae:	1a 2e       	mov	r1, r26
 ab0:	aa 1b       	sub	r26, r26
 ab2:	bb 1b       	sub	r27, r27
 ab4:	fd 01       	movw	r30, r26
 ab6:	0d c0       	rjmp	.+26     	; 0xad2 <__udivmodsi4_ep>

00000ab8 <__udivmodsi4_loop>:
 ab8:	aa 1f       	adc	r26, r26
 aba:	bb 1f       	adc	r27, r27
 abc:	ee 1f       	adc	r30, r30
 abe:	ff 1f       	adc	r31, r31
 ac0:	a2 17       	cp	r26, r18
 ac2:	b3 07       	cpc	r27, r19
 ac4:	e4 07       	cpc	r30, r20
 ac6:	f5 07       	cpc	r31, r21
 ac8:	20 f0       	brcs	.+8      	; 0xad2 <__udivmodsi4_ep>
 aca:	a2 1b       	sub	r26, r18
 acc:	b3 0b       	sbc	r27, r19
 ace:	e4 0b       	sbc	r30, r20
 ad0:	f5 0b       	sbc	r31, r21

00000ad2 <__udivmodsi4_ep>:
 ad2:	66 1f       	adc	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	99 1f       	adc	r25, r25
 ada:	1a 94       	dec	r1
 adc:	69 f7       	brne	.-38     	; 0xab8 <__udivmodsi4_loop>
 ade:	60 95       	com	r22
 ae0:	70 95       	com	r23
 ae2:	80 95       	com	r24
 ae4:	90 95       	com	r25
 ae6:	9b 01       	movw	r18, r22
 ae8:	ac 01       	movw	r20, r24
 aea:	bd 01       	movw	r22, r26
 aec:	cf 01       	movw	r24, r30
 aee:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000d64 <__umulhisi3>:
 d64:	a2 9f       	mul	r26, r18
 d66:	b0 01       	movw	r22, r0
 d68:	b3 9f       	mul	r27, r19
 d6a:	c0 01       	movw	r24, r0
 d6c:	a3 9f       	mul	r26, r19
 d6e:	70 0d       	add	r23, r0
 d70:	81 1d       	adc	r24, r1
 d72:	11 24       	eor	r1, r1
 d74:	91 1d       	adc	r25, r1
 d76:	b2 9f       	mul	r27, r18
 d78:	70 0d       	add	r23, r0
 d7a:	81 1d       	adc	r24, r1
 d7c:	11 24       	eor	r1, r1
 d7e:	91 1d       	adc	r25, r1
 d80:	08 95       	ret

Disassembly of section .text.libgcc:

00000d9c <__movmemx_qi>:
 d9c:	99 27       	eor	r25, r25

00000d9e <__movmemx_hi>:
 d9e:	77 fd       	sbrc	r23, 7
 da0:	05 c0       	rjmp	.+10     	; 0xdac <__movmemx_hi+0xe>
 da2:	05 90       	lpm	r0, Z+
 da4:	0d 92       	st	X+, r0
 da6:	01 97       	sbiw	r24, 0x01	; 1
 da8:	e1 f7       	brne	.-8      	; 0xda2 <__movmemx_hi+0x4>
 daa:	08 95       	ret
 dac:	01 90       	ld	r0, Z+
 dae:	0d 92       	st	X+, r0
 db0:	01 97       	sbiw	r24, 0x01	; 1
 db2:	e1 f7       	brne	.-8      	; 0xdac <__movmemx_hi+0xe>
 db4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000e90 <_fini>:
 e90:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000e92 <__funcs_on_exit>:
 e92:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000e94 <__simulator_exit>:
 e94:	08 95       	ret

Disassembly of section .text.exit:

00000dce <exit>:
 dce:	ec 01       	movw	r28, r24
 dd0:	0e 94 49 07 	call	0xe92	; 0xe92 <__funcs_on_exit>
 dd4:	0e 94 48 07 	call	0xe90	; 0xe90 <_fini>
 dd8:	ce 01       	movw	r24, r28
 dda:	0e 94 4a 07 	call	0xe94	; 0xe94 <__simulator_exit>
 dde:	ce 01       	movw	r24, r28
 de0:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Exit>

Disassembly of section .text._Exit:

00000e8c <_Exit>:
 e8c:	0e 94 5e 00 	call	0xbc	; 0xbc <_exit>
